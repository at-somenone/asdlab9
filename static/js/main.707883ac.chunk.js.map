{"version":3,"sources":["HashTable/Hasher/DivideHasher.ts","HashTable/Hasher/MultiplyHasher.ts","HashTable/StringConverter.ts","HashTable/Prober.ts","HashTable/HashTable.ts","testHasher.ts","App.tsx","index.tsx"],"names":["divideHasher","key","tableSize","a","Math","sqrt","multiplyHasher","floor","chance","Chance","t","unique","integer","min","max","StringConverter","s","sum","i","length","charCodeAt","prober","initialHash","index","c","d","HashTable","hasher","size","arr","this","Array","console","log","searchLength","keyNum","currentHash","undefined","Error","nanoid","customAlphabet","App","useState","setHasher","keyCount","setKeyCount","setTableSize","setC","setD","results","setResults","className","type","radioGroup","checked","onChange","e","target","value","isNaN","valueAsNumber","onClick","table","fill","add","testProber","ResponsiveContainer","width","height","BarChart","data","margin","bottom","CartesianGrid","strokeDasharray","XAxis","Label","position","offset","YAxis","allowDecimals","angle","style","textAnchor","Bar","dataKey","v","reduce","acc","n","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.707883ac.chunk.js","sourcesContent":["import Hasher from './Hasher'\n\nconst divideHasher: Hasher = (key: number, tableSize: number) => key % tableSize\n\nexport default divideHasher\n","import Hasher from './Hasher'\n\nconst a = (Math.sqrt(5) - 1) / 2\nconst multiplyHasher: Hasher = (key: number, tableSize: number) =>\n    Math.floor(tableSize * ((key * a) % 1))\n\nexport default multiplyHasher\n","import { Chance } from 'chance'\n\nconst chance = Chance()\nconst t = chance.unique(() => chance.integer({ min: 0, max: 255 }), 100)\nconst StringConverter = (s: string) => {\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i) ^ t[i % t.length]\n    }\n\n    return sum\n}\n\nexport default StringConverter\n","const prober = (initialHash: number, index: number, c: number, d: number) =>\n    initialHash + c * index + d * index ** 2\n\nexport default prober\n","import StringConverter from './StringConverter'\nimport Hasher from './Hasher/Hasher'\nimport prober from './Prober'\n\nexport default class HashTable {\n    private readonly arr: string[]\n    constructor(\n        readonly hasher: Hasher,\n        readonly c: number,\n        readonly d: number,\n        readonly size: number\n    ) {\n        this.arr = Array(size)\n        console.log(this.arr.length)\n    }\n\n    // возвращает длину поиска\n    add(key: string): number {\n        let searchLength = 0\n        const keyNum = StringConverter(key)\n        const initialHash = this.hasher(keyNum, this.size)\n        let currentHash = initialHash\n        while (this.arr[currentHash] !== undefined) {\n            if (this.arr[currentHash] == key)\n                throw new Error('key is already in table')\n            searchLength += 1\n            currentHash =\n                prober(initialHash, searchLength, this.c, this.d) % this.size\n        }\n\n        this.arr[currentHash] = key\n        return searchLength\n    }\n}\n","import { customAlphabet } from 'nanoid/non-secure'\nimport Hasher from './HashTable/Hasher/Hasher'\nimport HashTable from './HashTable/HashTable'\n\nconst nanoid = customAlphabet(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n    6\n)\n\nexport default function testProber(\n    hasher: Hasher,\n    c: number,\n    d: number,\n    keyCount: number,\n    tableSize: number\n) {\n    const results: Array<number> = new Array(keyCount)\n    const table = new HashTable(hasher, c, d, tableSize)\n    results.fill(0)\n\n    for (let i = 0; i < keyCount; i++) {\n        const key = nanoid()\n        const searchLength = table.add(key)\n        results[i] = searchLength\n    }\n\n    return results\n}\n","import {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Label,\n    ResponsiveContainer,\n    XAxis,\n    YAxis,\n} from 'recharts'\nimport { useState } from 'react'\nimport divideHasher from './HashTable/Hasher/DivideHasher'\nimport Hasher from './HashTable/Hasher/Hasher'\nimport multiplyHasher from './HashTable/Hasher/MultiplyHasher'\nimport testProber from './testHasher'\n\nfunction App() {\n    const [hasher, setHasher] = useState<Hasher>(() => divideHasher)\n\n    const [keyCount, setKeyCount] = useState(200)\n    const [tableSize, setTableSize] = useState(500)\n    const [c, setC] = useState(37)\n    const [d, setD] = useState(3)\n    const [results, setResults] = useState<number[] | undefined>(undefined)\n\n    return (\n        <div className=\"App\">\n            <h3>Метод хеширования</h3>\n            <div>\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={hasher === divideHasher}\n                    onChange={e =>\n                        e.target.checked && setHasher(() => divideHasher)\n                    }\n                />\n                Хеширование делением\n                <br />\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={hasher === multiplyHasher}\n                    onChange={e =>\n                        e.target.checked && setHasher(() => multiplyHasher)\n                    }\n                />\n                Хеширование умножением\n            </div>\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={c}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setC(Math.floor(e.target.valueAsNumber))\n                }\n            />\n            C\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={d}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setD(Math.floor(e.target.valueAsNumber))\n                }\n            />\n            D\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={tableSize}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setTableSize(e.target.valueAsNumber)\n                }\n            />\n            Размер таблицы\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={keyCount}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setKeyCount(e.target.valueAsNumber)\n                }\n            />\n            Количество ключей\n            <br />\n            <button\n                onClick={() =>\n                    setResults(testProber(hasher, c, d, keyCount, tableSize))\n                }\n            >\n                Вычислить\n            </button>\n            {results && (\n                <>\n                    {' '}\n                    (\n                    <ResponsiveContainer width=\"100%\" height={400}>\n                        <BarChart data={results} margin={{ bottom: 20 }}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis>\n                                <Label\n                                    value=\"Номер ключа\"\n                                    position=\"bottom\"\n                                    offset={-5}\n                                />\n                            </XAxis>\n                            <YAxis allowDecimals={false}>\n                                <Label\n                                    value=\"Длина поиска\"\n                                    position=\"left\"\n                                    angle={270}\n                                    offset={-30}\n                                    style={{ textAnchor: 'middle' }}\n                                />\n                            </YAxis>\n                            <Bar\n                                dataKey={(v: number) => v || 0}\n                                fill=\"#2B2D42\"\n                            />\n                        </BarChart>\n                    </ResponsiveContainer>\n                    )\n                    <span>\n                        Сумма длин: {results.reduce((acc, n) => acc + n)}\n                    </span>\n                </>\n            )}\n            <br />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}