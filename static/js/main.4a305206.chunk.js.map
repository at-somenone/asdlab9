{"version":3,"sources":["hashers/DivideHasher.ts","hashers/MultiplyHasher.ts","stringConverters/AdditionConverter.ts","stringConverters/XorConverter.ts","testHasher.ts","App.tsx","index.tsx"],"names":["divideHasher","key","tableSize","a","Math","sqrt","multiplyHasher","floor","additionConverter","s","sum","i","length","charCodeAt","chance","Chance","t","unique","integer","min","max","xorConverter","nanoid","customAlphabet","testHasher","hasher","converter","keyCount","results","Array","fill","hash","App","useState","setHasher","setConverter","setKeyCount","setTableSize","setResults","anyKeys","filter","v","addressesUsed","avgCollisions","reduce","acc","console","log","className","type","radioGroup","checked","onChange","e","target","value","isNaN","valueAsNumber","onClick","ResponsiveContainer","width","height","BarChart","data","margin","bottom","CartesianGrid","strokeDasharray","XAxis","Label","position","offset","YAxis","angle","style","textAnchor","Bar","dataKey","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a305206.chunk.js","sourcesContent":["import Hasher from './Hasher'\n\nconst divideHasher: Hasher = (key: number, tableSize: number) => key % tableSize\n\nexport default divideHasher\n","import Hasher from './Hasher'\n\nconst a = (Math.sqrt(5) - 1) / 2\nconst multiplyHasher: Hasher = (key: number, tableSize: number) =>\n    Math.floor(tableSize * ((key * a) % 1))\n\nexport default multiplyHasher\n","import StringConverter from './StringConverter'\n\nconst additionConverter: StringConverter = (s: string) => {\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i)\n    }\n\n    return sum\n}\n\nexport default additionConverter\n","import { Chance } from 'chance'\nimport StringConverter from './StringConverter'\n\nconst chance = Chance()\nconst t = chance.unique(() => chance.integer({ min: 0, max: 255 }), 100)\nconst xorConverter: StringConverter = (s: string) => {\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i) ^ t[i % t.length]\n    }\n\n    return sum\n}\n\nexport default xorConverter\n","import { customAlphabet } from 'nanoid/non-secure'\nimport Hasher from './hashers/Hasher'\nimport StringConverter from './stringConverters/StringConverter'\n\nconst nanoid = customAlphabet(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n    6\n)\n\nexport default function testHasher(\n    hasher: Hasher,\n    converter: StringConverter,\n    keyCount: number,\n    tableSize: number\n) {\n    const results: Array<number> = new Array(tableSize)\n    results.fill(0)\n    for (let i = 0; i < keyCount; i++) {\n        const key = nanoid()\n        const convertedKey = converter(key)\n        const hash = hasher(convertedKey, tableSize)\n        results[hash] = (results[hash] || 0) + 1\n    }\n\n    return results\n}\n","import {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Label,\n    ResponsiveContainer,\n    XAxis,\n    YAxis,\n} from 'recharts'\nimport { useState } from 'react'\nimport divideHasher from './hashers/DivideHasher'\nimport Hasher from './hashers/Hasher'\nimport multiplyHasher from './hashers/MultiplyHasher'\nimport additionConverter from './stringConverters/AdditionConverter'\nimport StringConverter from './stringConverters/StringConverter'\nimport xorConverter from './stringConverters/XorConverter'\nimport testHasher from './testHasher'\n\nfunction App() {\n    const [hasher, setHasher] = useState<Hasher>(() => divideHasher)\n    const [converter, setConverter] = useState<StringConverter>(\n        () => additionConverter\n    )\n    const [keyCount, setKeyCount] = useState(100)\n    const [tableSize, setTableSize] = useState(20)\n    const [results, setResults] = useState<number[]>(\n        testHasher(hasher, converter, keyCount, tableSize)\n    )\n\n    const anyKeys = results.filter(v => v > 0)\n    const addressesUsed = anyKeys.length\n    const avgCollisions = anyKeys.reduce((acc, v) => acc + v) / addressesUsed\n\n    console.log(results)\n    return (\n        <div className=\"App\">\n            <h3>Метод хеширования</h3>\n            <div>\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={hasher === divideHasher}\n                    onChange={e =>\n                        e.target.checked && setHasher(() => divideHasher)\n                    }\n                />\n                Хеширование сложением\n                <br />\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={hasher === multiplyHasher}\n                    onChange={e =>\n                        e.target.checked && setHasher(() => multiplyHasher)\n                    }\n                />\n                Хеширование умножением\n            </div>\n            <h3>Метод преобразования</h3>\n            <div>\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={converter === additionConverter}\n                    onChange={e =>\n                        e.target.checked &&\n                        setConverter(() => additionConverter)\n                    }\n                />\n                Преобразование сложением\n                <br />\n                <input\n                    type=\"radio\"\n                    radioGroup=\"hasher\"\n                    checked={converter === xorConverter}\n                    onChange={e =>\n                        e.target.checked && setConverter(() => xorConverter)\n                    }\n                />\n                Преобразование XOR\n            </div>\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={tableSize}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setTableSize(e.target.valueAsNumber)\n                }\n            />\n            Размер таблицы\n            <br />\n            <input\n                type=\"number\"\n                min={2}\n                value={keyCount}\n                max={10000}\n                onChange={e =>\n                    !isNaN(e.target.valueAsNumber) &&\n                    setKeyCount(e.target.valueAsNumber)\n                }\n            />\n            Количество ключей\n            <br />\n            <button\n                onClick={() =>\n                    setResults(\n                        testHasher(hasher, converter, keyCount, tableSize)\n                    )\n                }\n            >\n                Вычислить\n            </button>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={results} margin={{ bottom: 20 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis>\n                        <Label\n                            value=\"Адрес таблицы\"\n                            position=\"bottom\"\n                            offset={-5}\n                        />\n                    </XAxis>\n                    <YAxis>\n                        <Label\n                            value=\"Кол-во коллизий\"\n                            position=\"left\"\n                            angle={270}\n                            offset={-30}\n                            style={{ textAnchor: 'middle' }}\n                        />\n                    </YAxis>\n                    <Bar dataKey={(v: number) => v || 0} fill=\"#2B2D42\" />\n                </BarChart>\n            </ResponsiveContainer>\n            <span>\n                Неиспользованных адресов: {results.length - anyKeys.length}\n            </span>\n            <br />\n            <span>\n                Среднее кол-во коллизий (среди использованных адресов):{' '}\n                {avgCollisions.toFixed(4)}\n            </span>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}